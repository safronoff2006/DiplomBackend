# https://www.playframework.com/documentation/latest/Configuration
play.http.secret.key = "ZS9iANm3pZS^ySkxWTLe/E<y=728XyvfBDw=a5lOwwi7AS]15hMPI88@tjHqAn/m"



akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #

  log-config-on-start = false

  http {

    server {
      idle-timeout = 3600 seconds
    }

    client {
      idle-timeout = 3600 seconds
    }

  }

}


play {
  server {
    # HTTP configuration
    http {
      # The HTTP port of the server. Use a value of "disabled" if the server
      # shouldn't bind an HTTP port.
      port = 3577

      requestTimeout = 40000

      idleTimeout = 3600000
    }
  }
}

play.i18n {
  # The application languages
  langs = ["ru"]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}


play.filters {

  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  enabled += filters.ExampleFilter

  enabled += play.filters.csrf.CSRFFilter

  enabled += play.filters.cors.CORSFilter

  # Disabled filters remove elements from the enabled list.
  #disabled += filters.ExampleFilters

  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {

  }

  csrf {


  }

  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    allowed = ["192.168.0.252","127.0.0.1","localhost"]
  }
}


## фиксированный пул для блокирующих и длительных олераций
fixedBlockPool = 30

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = ${fixedBlockPool}
  }
  throughput = 1
}


## общая конфигурация сервера
serverconf {
  servicename = "Oil Server"
  version = 0.1

}

## конфигурация UDP сервера
udp-server {
  #host=192.168.0.252
  port = 9010
}


## конфиурация TCP серверов
tcp-servers {
  host-ip: "127.0.0.1"
  servers: [
    {
      id: "Первый"
      port: 8876
      phisicalObject: "RailWeighbridge"
      channelName: RailsMain

    },
    {
      id: "Второй"
      port: 8877
      phisicalObject: "TruckScale[1]"
      channelName: AutoMain
    },
    {
      id: "Третий"
      port: 8878
      phisicalObject: "TruckScale[2]"
      channelName: AutoMain
    },

    {
      id: "Четвертый"
      port: 8879
      phisicalObject: "TruckScale[3]"
      channelName: AutoMain
    }

  ]
}

## конфигурация протоколов
protocols: {
  AutoMain: SCALE_DATA_PATTERN_PROTOCOL2
  RailsMain: SCALE_DATA_PATTERN_RAIL_PROTOCOL
}

card: SCALE_DATA_PATTERN_PROTOCOL2_EMMARIN

useCRC: false

convert_HexEmMarine_to_TextEmMarine: true

# таймаут на который блокируется  обработчика карты
timeoutCardResponce: 3

# конфигурация майлбоксов для акторов стейт-машин
mailboxes {
  state-machine-mailbox {

    mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"

    #mailbox-type = "akka.dispatch.BoundedMailbox"
    #mailbox-capacity = 1000
    #mailbox-push-timeout-time = 1s
  }
}

# конфигурация веб-протокола
webProtocols: {
  Http {
    name: "Http",
    endPoint: ""
  }
  WebSocket {
    name: "WebSocket"
    endPoint: "ws://192.168.0.252:9000/websocket"
  }
  Any {
    name: "Any"
    endPoint: "ws://192.168.0.252:9000/websocket"
  }

  use: ${webProtocols.WebSocket}
}

# конфигурация пула для HicariCP
fixedConnectionPool = 24

# параметры подключения к БД
jdbcUrl =  "jdbc:postgresql://localhost:2345/oildata"
db_username = postgres
db_password = mutabor2006

# конфигурация Slick
slick.dbs {
  default.profile = "slick.jdbc.PostgresProfile$"
  default.db.driver = "org.postgresql.Driver"
  default.db.numThreads=${fixedConnectionPool}
  default.db.maxConnections=${fixedConnectionPool}
  default.db.url = ${jdbcUrl}
  default.db.user = ${db_username}
  default.db.password = ${db_password}
}

# конфигурации группировки и параллелизма для вставки данных
insertConf {
  test {
    listMaxSize: 50
    groupSize: 10
    parallelism: 5
  }

  state {
    listMaxSize: 10
    groupSize: 5
    parallelism: 2
  }

  card {
    listMaxSize: 2
    groupSize: 1
    parallelism: 2
  }
}







